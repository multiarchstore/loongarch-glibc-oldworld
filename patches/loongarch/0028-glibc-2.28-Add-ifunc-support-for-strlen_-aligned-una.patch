From 1844405f9b8309aca864f1b95c0f10d360bffd89 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Sat, 18 Feb 2023 11:11:42 +0800
Subject: [PATCH 28/44] glibc-2.28: Add ifunc support for
 strlen_{aligned,unaligned,lsx}

Change-Id: Ic81844bae13acfffe98eb3ad89dd7448b18bd7d8
---
 sysdeps/loongarch/lp64/multiarch/Makefile     |   3 +-
 .../lp64/multiarch/ifunc-impl-list.c          |   6 +
 .../loongarch/lp64/multiarch/ifunc-strlen.h   |  37 ++++
 .../loongarch/lp64/multiarch/strlen-aligned.S |   8 +
 sysdeps/loongarch/lp64/multiarch/strlen-lsx.S |  55 ++++++
 .../lp64/multiarch/strlen-unaligned.S         | 116 +++++++++++++
 sysdeps/loongarch/lp64/multiarch/strlen.c     |  39 +++++
 sysdeps/loongarch/lp64/strlen.S               | 161 +++++++-----------
 8 files changed, 329 insertions(+), 96 deletions(-)
 create mode 100644 sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strlen-aligned.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strlen-lsx.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strlen-unaligned.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strlen.c

diff --git a/sysdeps/loongarch/lp64/multiarch/Makefile b/sysdeps/loongarch/lp64/multiarch/Makefile
index f7bf31e6e8..e60b99fca4 100644
--- a/sysdeps/loongarch/lp64/multiarch/Makefile
+++ b/sysdeps/loongarch/lp64/multiarch/Makefile
@@ -7,5 +7,6 @@ sysdep_routines += memcpy-aligned memcpy-unaligned memcpy-lasx \
 		   memcmp-aligned memcmp-lsx \
 		   rawmemchr-aligned rawmemchr-lsx \
 		   strchr-aligned strchr-unaligned strchr-lsx \
-		   strrchr-aligned strrchr-lsx
+		   strrchr-aligned strrchr-lsx \
+		   strlen-aligned strlen-unaligned strlen-lsx
 endif
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
index 6be2038d95..3dbd371f77 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
@@ -86,6 +86,12 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 	      IFUNC_IMPL_ADD (array, i, strrchr, 1, __strrchr_aligned)
 	      )
 
+  IFUNC_IMPL (i, name, strlen,
+	      IFUNC_IMPL_ADD (array, i, strlen, 1, __strlen_lsx)
+	      IFUNC_IMPL_ADD (array, i, strlen, 1, __strlen_aligned)
+	      IFUNC_IMPL_ADD (array, i, strlen, 1, __strlen_unaligned)
+	      )
+
   return i;
 }
 
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h b/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
new file mode 100644
index 0000000000..efd7754943
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
@@ -0,0 +1,37 @@
+/* Common definition for strlen implementation.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <init-arch.h>
+
+extern __typeof (REDIRECT_NAME) OPTIMIZE (lsx) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (aligned) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (unaligned) attribute_hidden;
+
+static inline void *
+IFUNC_SELECTOR (void)
+{
+  INIT_ARCH();
+
+  if (SUPPORT_LSX)
+    return OPTIMIZE (lsx);
+  if (SUPPORT_UAL)
+    return OPTIMIZE (unaligned);
+  else
+    return OPTIMIZE (aligned);
+}
diff --git a/sysdeps/loongarch/lp64/multiarch/strlen-aligned.S b/sysdeps/loongarch/lp64/multiarch/strlen-aligned.S
new file mode 100644
index 0000000000..d31875fdb2
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strlen-aligned.S
@@ -0,0 +1,8 @@
+
+#if IS_IN (libc)
+
+#define STRLEN __strlen_aligned
+
+#endif
+
+#include "../strlen.S"
diff --git a/sysdeps/loongarch/lp64/multiarch/strlen-lsx.S b/sysdeps/loongarch/lp64/multiarch/strlen-lsx.S
new file mode 100644
index 0000000000..0c1f522931
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strlen-lsx.S
@@ -0,0 +1,55 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define STRLEN	__strlen_lsx
+
+/* size_t strlen(const char *s1); */
+
+LEAF(STRLEN)
+    .align          6
+    move            a1, a0
+    bstrins.d       a0, zero, 4, 0
+    vld             $vr0, a0, 0
+    vld             $vr1, a0, 16
+
+    li.d            t1, -1
+    addi.d          a0, a0, 16
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+
+    vilvl.h         $vr0, $vr1, $vr0
+    movfr2gr.s      t0, $f0
+    sra.w           t0, t0, a1
+    beq             t0, t1, L(loop)
+
+    cto.w           a0, t0
+    jr              ra
+L(loop):
+    vld             $vr0, a0, 16
+    addi.d          a0, a0, 16
+
+
+    vsetanyeqz.b    $fcc0, $vr0
+    bceqz           $fcc0, L(loop)
+    vmsknz.b        $vr0, $vr0
+    sub.d           a0, a0, a1
+
+    movfr2gr.s      t0, $f0
+    cto.w           t0, t0
+    add.d           a0, a0, t0
+    jr              ra
+END(STRLEN)
+
+#ifdef _LIBC
+libc_hidden_builtin_def (STRLEN)
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/strlen-unaligned.S b/sysdeps/loongarch/lp64/multiarch/strlen-unaligned.S
new file mode 100644
index 0000000000..e9b7cf6727
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strlen-unaligned.S
@@ -0,0 +1,116 @@
+/* Copyright 2016 Loongson Technology Corporation Limited.  */
+
+/* Author: Songyuekun songyuekun@loongson.cn.  */
+
+/* algorithm:
+  #. use ld/ldr to access word/partial word in the string
+  #. use (x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) != 0 to
+     judge if x has zero byte
+  #. use dctz((x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) >> 3
+     to get the index of first rightmost zero byte in dword x;
+  #. use dctz(x) = 64 - dclz(~x & (x-1));
+  #. use pointer to the last non zero byte minus pointer to the start
+     of the string to get the length of string.  */
+
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define L_ADDIU  addi.d
+#define L_ADDU   add.d
+#define L_SUBU   sub.d
+
+#define STRLEN	__strlen_unaligned
+
+/* size_t strlen (const char *s1); */
+
+LEAF(STRLEN)
+	.align		5
+	nor		t4, zero, zero
+	lu12i.w		a2, 0x01010
+	andi		t5, a0, 0x7
+
+	li.w		t7, 0x7
+	slli.d		t6, t5, 0x3
+	andn		t7, a0, t7
+	ld.d		a1, t7, 0
+	sub.d		t7, zero, t6
+	sll.d		t4, t4, t7
+	maskeqz		t4, t4, t6
+	srl.d		a1, a1, t6
+	or		a1, a1, t4
+
+	ori		a2, a2, 0x101
+	nor		t1, a1, zero
+	li.w		a4, 8
+
+	bstrins.d	a2, a2, 63, 32
+	sub.d		a5, a4, t5
+	move		t5, a0
+
+	sub.d		t0, a1, a2
+	slli.d		t4, a2, 7
+	nor		a3, zero, t4
+	nor		t1, a1, a3
+
+	and		t0, t0, t1
+	bnez		t0, strlen_count1	/* instead of use bnel with daddu a0, a0, a5 in branch slot */
+	L_ADDU		a0, a0, a5
+strlen_loop:
+	ld.d		a1, a0, 0
+	sub.d		t0, a1, a2
+	and		t1, t0, t4
+	bnez		t1, strlen_count_pre
+	ld.d		a1, a0, 8
+	sub.d		t0, a1, a2
+	and		    t1, t0, t4
+	L_ADDIU		a0, a0, 16
+	beqz		t1, strlen_loop
+strlen_count:
+	addi.d      	a0, a0, -8
+strlen_count_pre:
+	nor         	t1, a1, a3
+    	and         	t0, t0, t1
+    	beqz        	t0, strlen_noascii_start
+strlen_count1:
+	ctz.d		t1, t0
+	L_SUBU		v0, a0, t5
+	srli.w		t1, t1, 3
+	L_ADDU		v0, v0, t1
+	jr		ra
+strlen_noascii_start:
+	addi.d		a0, a0, 8
+strlen_loop_noascii:
+	ld.d		a1, a0, 0
+	sub.d		t0, a1, a2
+	nor		t1, a1, a3
+	and		t0, t0, t1
+	bnez		t0, strlen_count1
+	ld.d		a1, a0, 8
+	sub.d		t0, a1, a2
+	nor		t1, a1, a3
+	and		t0, t0, t1
+	L_ADDIU		a0, a0, 16
+	beqz		t0, strlen_loop_noascii
+	addi.d		a0, a0, -8
+	ctz.d		t1, t0
+	L_SUBU		v0, a0, t5
+	srli.w		t1, t1, 3
+	L_ADDU		v0, v0, t1
+	jr		ra
+END(STRLEN)
+
+#ifndef ANDROID_CHANGES
+#ifdef _LIBC
+libc_hidden_builtin_def (STRLEN)
+#endif
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/strlen.c b/sysdeps/loongarch/lp64/multiarch/strlen.c
new file mode 100644
index 0000000000..f8820f5376
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strlen.c
@@ -0,0 +1,39 @@
+/* Multiple versions of strlen.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+/* Define multiple versions only for the definition in libc.  */
+#if IS_IN (libc)
+# define strlen __redirect_strlen
+# include <string.h>
+# undef strlen
+
+# define SYMBOL_NAME strlen
+# include "ifunc-strlen.h"
+
+libc_ifunc_redirected (__redirect_strlen, __new_strlen,
+		       IFUNC_SELECTOR ());
+
+# ifdef SHARED
+__hidden_ver1 (__new_strlen, __GI_strlen, __redirect_strlen)
+  __attribute__ ((visibility ("hidden")));
+# endif
+
+# include <shlib-compat.h>
+versioned_symbol (libc, __new_strlen, strlen, GLIBC_2_27);
+#endif
diff --git a/sysdeps/loongarch/lp64/strlen.S b/sysdeps/loongarch/lp64/strlen.S
index e017f9a609..dd5a8da350 100644
--- a/sysdeps/loongarch/lp64/strlen.S
+++ b/sysdeps/loongarch/lp64/strlen.S
@@ -1,115 +1,86 @@
-/* Copyright 2016 Loongson Technology Corporation Limited.  */
-
-/* Author: Songyuekun songyuekun@loongson.cn.  */
-
-/* algorithm:
-  #. use ld/ldr to access word/partial word in the string
-  #. use (x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) != 0 to
-     judge if x has zero byte
-  #. use dctz((x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) >> 3
-     to get the index of first rightmost zero byte in dword x;
-  #. use dctz(x) = 64 - dclz(~x & (x-1));
-  #. use pointer to the last non zero byte minus pointer to the start
-     of the string to get the length of string.  */
-
-
+#ifdef _LIBC
 #include <sysdep.h>
+#include <sys/regdef.h>
 #include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
 
-#define L_ADDIU  addi.d
-#define L_ADDU   add.d
-#define L_SUBU   sub.d
-
+#ifndef STRLEN
 #define STRLEN	strlen
+#endif
 
-/* size_t strlen (const char *s1); */
-
-	.text;
-	.globl	strlen;
-	.align		5;
-	cfi_startproc ;
-	.type	strlen, @function;
-strlen:
-
-    //LEAF(strlen)
-
-	nor		t4, zero, zero
+LEAF(STRLEN)
+	.align 6
+	move		a1, a0
+	bstrins.d	a0, zero, 2, 0
 	lu12i.w		a2, 0x01010
-	andi		t5, a0, 0x7
-
-	li.w		t7, 0x7
-	slli.d		t6, t5, 0x3
-	andn		t7, a0, t7
-	ld.d		a1, t7, 0
-	sub.d		t7, zero, t6
-	sll.d		t4, t4, t7
-	maskeqz		t4, t4, t6
-	srl.d		a1, a1, t6
-	or		a1, a1, t4
+	li.w		t0, -1
 
+	ld.d		t2, a0, 0
+	andi		t1, a1, 0x7
 	ori		a2, a2, 0x101
-	nor		t1, a1, zero
-	li.w		a4, 8
+	slli.d		t1, t1, 3
 
 	bstrins.d	a2, a2, 63, 32
-	sub.d		a5, a4, t5
-	move		t5, a0
-
-	sub.d		t0, a1, a2
-	slli.d		t4, a2, 7
-	nor		a3, zero, t4
-	nor		t1, a1, a3
+	sll.d		t1, t0, t1
+	slli.d		t3, a2, 7
+	nor		a3, zero, t3
 
+	orn		t2, t2, t1
+	sub.d		t0, t2, a2
+	nor		t1, t2, a3
 	and		t0, t0, t1
-	bnez		t0, strlen_count1	/* instead of use bnel with daddu a0, a0, a5 in branch slot */
-	L_ADDU		a0, a0, a5
-strlen_loop:
-	ld.d		a1, a0, 0
-	sub.d		t0, a1, a2
-	and		t1, t0, t4
-	bnez		t1, strlen_count_pre
-	ld.d		a1, a0, 8
-	sub.d		t0, a1, a2
-	and		    t1, t0, t4
-	L_ADDIU		a0, a0, 16
-	beqz		t1, strlen_loop
-strlen_count:
-	addi.d      	a0, a0, -8
-strlen_count_pre:
-	nor         	t1, a1, a3
-    	and         	t0, t0, t1
-    	beqz        	t0, strlen_noascii_start
-strlen_count1:
-	ctz.d		t1, t0
-	L_SUBU		v0, a0, t5
-	srli.w		t1, t1, 3
-	L_ADDU		v0, v0, t1
-	jr		ra
-strlen_noascii_start:
-	addi.d		a0, a0, 8
-strlen_loop_noascii:
-	ld.d		a1, a0, 0
-	sub.d		t0, a1, a2
-	nor		t1, a1, a3
+
+
+	bnez		t0, L(count_pos)
+	addi.d          a0, a0, 8
+L(loop_16_7bit):
+	ld.d		t2, a0, 0
+	sub.d		t1, t2, a2
+
+	and 		t0, t1, t3
+	bnez		t0, L(more_check)
+	ld.d		t2, a0, 8
+	addi.d      	a0, a0, 16
+
+	sub.d		t1, t2, a2
+	and 		t0, t1, t3
+	beqz        	t0, L(loop_16_7bit)
+	addi.d          a0, a0, -8
+L(more_check):
+	nor		t0, t2, a3
+
+	and		t0, t1, t0
+	bnez		t0, L(count_pos)
+	addi.d          a0, a0, 8
+L(loop_16_8bit):
+	ld.d		t2, a0, 0
+
+	sub.d		t1, t2, a2
+	nor		t0, t2, a3
 	and		t0, t0, t1
-	bnez		t0, strlen_count1
-	ld.d		a1, a0, 8
-	sub.d		t0, a1, a2
-	nor		t1, a1, a3
+	bnez		t0, L(count_pos)
+
+	ld.d		t2, a0, 8
+	addi.d      	a0, a0, 16
+	sub.d		t1, t2, a2
+	nor		t0, t2, a3
+
 	and		t0, t0, t1
-	L_ADDIU		a0, a0, 16
-	beqz		t0, strlen_loop_noascii
-	addi.d		a0, a0, -8
+	beqz		t0, L(loop_16_8bit)
+	addi.d          a0, a0, -8
+L(count_pos):
 	ctz.d		t1, t0
-	L_SUBU		v0, a0, t5
-	srli.w		t1, t1, 3
-	L_ADDU		v0, v0, t1
+	sub.d		a0, a0, a1
+
+	srli.d		t1, t1, 3
+	add.d		a0, a0, t1
 	jr		ra
+
 END(STRLEN)
 
-#ifndef ANDROID_CHANGES
 #ifdef _LIBC
-libc_hidden_builtin_def (strlen)
+libc_hidden_builtin_def (STRLEN)
 #endif
-#endif
-
-- 
2.20.1

