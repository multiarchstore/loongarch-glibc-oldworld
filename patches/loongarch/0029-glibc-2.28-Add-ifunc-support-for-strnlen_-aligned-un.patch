From d299889dc32361aca64a1b5b7db00d0bfc2b649f Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Sat, 18 Feb 2023 12:22:28 +0800
Subject: [PATCH 29/44] glibc-2.28: Add ifunc support for
 strnlen_{aligned,unaligned,lsx}

Change-Id: I1e018bbe025837003be231931bfe36adb9892e15
---
 sysdeps/loongarch/lp64/multiarch/Makefile     |   3 +-
 .../lp64/multiarch/ifunc-impl-list.c          |   7 +
 .../loongarch/lp64/multiarch/ifunc-strlen.h   |   2 +-
 .../lp64/multiarch/strnlen-aligned.S          |   8 +
 .../loongarch/lp64/multiarch/strnlen-lsx.S    |  78 +++++++
 .../lp64/multiarch/strnlen-unaligned.S        | 145 ++++++++++++
 sysdeps/loongarch/lp64/multiarch/strnlen.c    |  40 ++++
 sysdeps/loongarch/lp64/strnlen.S              | 214 ++++++------------
 8 files changed, 352 insertions(+), 145 deletions(-)
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strnlen-aligned.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strnlen-lsx.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strnlen-unaligned.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strnlen.c

diff --git a/sysdeps/loongarch/lp64/multiarch/Makefile b/sysdeps/loongarch/lp64/multiarch/Makefile
index e60b99fca4..838f0b304e 100644
--- a/sysdeps/loongarch/lp64/multiarch/Makefile
+++ b/sysdeps/loongarch/lp64/multiarch/Makefile
@@ -8,5 +8,6 @@ sysdep_routines += memcpy-aligned memcpy-unaligned memcpy-lasx \
 		   rawmemchr-aligned rawmemchr-lsx \
 		   strchr-aligned strchr-unaligned strchr-lsx \
 		   strrchr-aligned strrchr-lsx \
-		   strlen-aligned strlen-unaligned strlen-lsx
+		   strlen-aligned strlen-unaligned strlen-lsx \
+		   strnlen-aligned strnlen-unaligned strnlen-lsx
 endif
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
index 3dbd371f77..1ade1d5a7c 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
@@ -92,6 +92,13 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 	      IFUNC_IMPL_ADD (array, i, strlen, 1, __strlen_unaligned)
 	      )
 
+  IFUNC_IMPL (i, name, strnlen,
+	      IFUNC_IMPL_ADD (array, i, strnlen, 1, __strnlen_lsx)
+	      IFUNC_IMPL_ADD (array, i, strnlen, 1, __strnlen_aligned)
+	      IFUNC_IMPL_ADD (array, i, strnlen, 1, __strnlen_unaligned)
+	      )
+
+
   return i;
 }
 
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h b/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
index efd7754943..06cec287e0 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-strlen.h
@@ -1,4 +1,4 @@
-/* Common definition for strlen implementation.
+/* Common definition for str{,n}len implementation.
    All versions must be listed in ifunc-impl-list.c.
    Copyright (C) 2017-2022 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
diff --git a/sysdeps/loongarch/lp64/multiarch/strnlen-aligned.S b/sysdeps/loongarch/lp64/multiarch/strnlen-aligned.S
new file mode 100644
index 0000000000..503442b3c0
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strnlen-aligned.S
@@ -0,0 +1,8 @@
+
+#if IS_IN (libc)
+
+#define STRNLEN __strnlen_aligned
+
+#endif
+
+#include "../strnlen.S"
diff --git a/sysdeps/loongarch/lp64/multiarch/strnlen-lsx.S b/sysdeps/loongarch/lp64/multiarch/strnlen-lsx.S
new file mode 100644
index 0000000000..dee5b74f90
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strnlen-lsx.S
@@ -0,0 +1,78 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define STRNLEN	__strnlen_lsx
+
+/* size_t strnlen (const char *s1, size_t maxlen); */
+
+LEAF(STRNLEN)
+    .align          6
+    beqz            a1, L(ret0)
+    andi            t1, a0, 0x1f
+    li.d            t3, 32
+    sub.d           t2, a0, t1
+
+    vld             $vr0, t2, 0
+    vld             $vr1, t2, 16
+    sub.d           t3, t3, t1
+    move            a2, a0
+
+    sltu            t1, t3, a1
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+    sltui           t1, t1, 1
+
+    vilvl.h         $vr0, $vr1, $vr0
+    movfr2gr.s      t0, $f0
+    sra.w           t0, t0, a2
+    orn             t1, t1, t0
+
+
+    bnez            t1, L(end)
+    move            a0, t2
+    sub.d           t2, a1, t3
+L(loop):
+    vld             $vr0, a0, 32
+
+    vld             $vr1, a0, 48
+    sltui           t1, t2, 33
+    addi.d          a0, a0, 32
+    addi.d          t2, t2, -32
+
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+    vilvl.h         $vr0, $vr1, $vr0
+    movfr2gr.s      t0, $f0
+
+    orn             t1, t1, t0
+    beqz            t1, L(loop)
+L(end):
+    sub.d           a0, a0, a2
+    cto.d           t0, t0
+
+
+    add.d           a0, a0, t0
+    sltu            t1, a0, a1
+    masknez         t0, a1, t1
+    maskeqz         t1, a0, t1
+
+    or              a0, t0, t1
+    jr              ra
+L(ret0):
+    move            a0, zero
+    jr              ra
+END(STRNLEN)
+
+#ifdef _LIBC
+libc_hidden_builtin_def (STRNLEN)
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/strnlen-unaligned.S b/sysdeps/loongarch/lp64/multiarch/strnlen-unaligned.S
new file mode 100644
index 0000000000..60eccf00e5
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strnlen-unaligned.S
@@ -0,0 +1,145 @@
+/* Copyright 2016 Loongson Technology Corporation Limited.  */
+
+/* Author: Songyuekun songyuekun@loongson.cn
+ * ISA: MIPS64R2
+ * ABI: N64.
+ * algorithm:
+	#. use ld/ldr to access word/partial word in the string
+	#. use (x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) != 0 to
+		judge if x has zero byte
+	#. use dctz((x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) >> 3
+		to get the index of first rightmost zero byte in dword x;
+	#. use dctz(x) = 64 - dclz(~x & (x-1));
+	#. use pointer to the last non zero byte  minus pointer to the start
+	of the string to get the length of string.  */
+
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define L_ADDIU  addi.d
+#define L_ADDU   add.d
+#define L_SUBU   sub.d
+
+#define STRNLEN	__strnlen_unaligned
+
+/* rd <- if rc then ra else rb
+    will destroy t6.  */
+
+#define CONDITIONSEL(rd,ra,rb,rc)\
+        masknez a5, rb, rc;\
+        maskeqz rd, ra, rc;\
+        or      rd, rd, a5
+
+/* Parameters and Results */
+#define srcin	a0
+#define	limit   a1
+#define len 	v0
+
+/* Internal variable */
+#define data1		t0
+#define	data2		t1
+#define	has_nul1	t2
+#define	has_nul2	t3
+#define src	        t4
+#define zeroones	t5
+#define	sevenf		t6
+#define data2a	    	t7
+#define tmp6	    	t7
+#define pos	        t8
+#define tmp1		a2
+#define	tmp2		a3
+#define	tmp3		a4
+#define tmp4        	a5
+#define tmp5        	a6
+#define limit_wd    	a7
+
+/* size_t strnlen (const char *s1,size_t maxlen); */
+
+LEAF(STRNLEN)
+
+    .align	4
+    beqz        limit, L(_hit_limit)
+    lu12i.w     zeroones, 0x01010
+    lu12i.w     sevenf, 0x7f7f7
+    ori         zeroones, zeroones, 0x101
+    ori         sevenf, sevenf, 0xf7f
+    bstrins.d   zeroones, zeroones, 63, 32
+    bstrins.d   sevenf, sevenf, 63, 32
+    andi        tmp1, srcin, 15
+    sub.d       src, srcin, tmp1
+    bnez        tmp1, L(misaligned)
+    addi.d      limit_wd, limit, -1
+    srli.d      limit_wd, limit_wd, 4
+L(_loop):
+    ld.d        data1, src, 0
+    ld.d        data2, src, 8
+    addi.d      src, src, 16
+L(_realigned):
+    sub.d       tmp1, data1, zeroones
+    or          tmp2, data1, sevenf
+    sub.d       tmp3, data2, zeroones
+    or          tmp4, data2, sevenf
+    andn        has_nul1, tmp1, tmp2
+    andn        has_nul2, tmp3, tmp4
+    addi.d      limit_wd, limit_wd, -1
+    srli.d      tmp1, limit_wd, 63
+    or          tmp2, has_nul1, has_nul2
+    or          tmp3, tmp1, tmp2
+    beqz        tmp3, L(_loop)
+    beqz        tmp2, L(_hit_limit)
+    sub.d       len, src, srcin
+    beqz        has_nul1, L(_nul_in_data2)
+    move        has_nul2, has_nul1
+    addi.d      len, len, -8
+L(_nul_in_data2):
+    ctz.d       pos, has_nul2
+    srli.d      pos, pos, 3
+    addi.d      len, len, -8
+    add.d       len, len, pos
+    sltu        tmp1, len, limit
+    CONDITIONSEL(len,len,limit,tmp1)
+    jr ra
+
+
+L(misaligned):
+    addi.d      limit_wd, limit, -1
+    sub.d       tmp4, zero, tmp1
+    andi        tmp3, limit_wd, 15
+    srli.d      limit_wd, limit_wd, 4
+    li.d        tmp5, -1
+    ld.d        data1, src, 0
+    ld.d        data2, src, 8
+    addi.d      src, src, 16
+    slli.d      tmp4, tmp4, 3
+    add.d       tmp3, tmp3, tmp1
+    srl.d       tmp2, tmp5, tmp4
+    srli.d      tmp3, tmp3, 4
+    add.d       limit_wd, limit_wd, tmp3
+    or          data1, data1, tmp2
+    or          data2a, data2, tmp2
+    li.w        tmp3, 9
+    sltu        tmp1, tmp1, tmp3
+    CONDITIONSEL(data1,data1,tmp5,tmp1)
+    CONDITIONSEL(data2,data2,data2a,tmp1)
+    b           L(_realigned)
+
+
+L(_hit_limit):
+    move	len, limit
+    jr		ra
+END(STRNLEN)
+#ifndef ANDROID_CHANGES
+#ifdef _LIBC
+libc_hidden_builtin_def (STRNLEN)
+#endif
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/strnlen.c b/sysdeps/loongarch/lp64/multiarch/strnlen.c
new file mode 100644
index 0000000000..ad752ec7ea
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strnlen.c
@@ -0,0 +1,40 @@
+/* Multiple versions of strnlen.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+/* Define multiple versions only for the definition in libc.  */
+#if IS_IN (libc)
+# define strnlen __redirect_strnlen
+# define __strnlen __redirect___strnlen
+# include <string.h>
+# undef __strnlen
+# undef strnlen
+
+# define SYMBOL_NAME strnlen
+# include "ifunc-strlen.h"
+
+libc_ifunc_redirected (__redirect_strnlen, __strnlen, IFUNC_SELECTOR ());
+weak_alias (__strnlen, strnlen);
+# ifdef SHARED
+__hidden_ver1 (__strnlen, __GI___strnlen, __redirect___strnlen)
+  __attribute__((visibility ("hidden")));
+__hidden_ver1 (strnlen, __GI_strnlen, __redirect_strnlen)
+  __attribute__((weak, visibility ("hidden")));
+# endif
+#endif
+
diff --git a/sysdeps/loongarch/lp64/strnlen.S b/sysdeps/loongarch/lp64/strnlen.S
index 349716f031..0517e206fe 100644
--- a/sysdeps/loongarch/lp64/strnlen.S
+++ b/sysdeps/loongarch/lp64/strnlen.S
@@ -1,155 +1,83 @@
-/* Copyright 2016 Loongson Technology Corporation Limited  */
-
-/* Author: Songyuekun songyuekun@loongson.cn */
-
-/*
- * ISA: MIPS64R2
- * ABI: N64
- */
-/*
-algorithm:
-
-	#.	use ld/ldr to access word/partial word in the string
-
-	#.	use (x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) != 0 to
-	judge if x has zero byte
-
-	#.	use dctz((x - 0x0101010101010101) & (~(x | 0x7f7f7f7f7f7f7f7f) >> 3
-		to get the index of first rightmost zero byte in dword x;
-
-	#.	use dctz(x) = 64 - dclz(~x & (x-1));
-
-	#.	use pointer to the last non zero byte  minus pointer to the start
-	of the string to get the length of string
-
-*/
-
+#ifdef _LIBC
 #include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
 #include <sys/asm.h>
 #include <sys/regdef.h>
+#endif
 
-
-
-#define L_ADDIU  addi.d
-#define L_ADDU   add.d
-#define L_SUBU   sub.d
-
+#ifndef STRNLEN
 #define STRNLEN	__strnlen
-/* rd <- if rc then ra else rb
-    will destroy t6
-*/
-
-#define CONDITIONSEL(rd,ra,rb,rc)\
-        masknez a5, rb, rc;\
-        maskeqz rd, ra, rc;\
-        or      rd, rd, a5
-
-
-/* Parameters and Results */
-#define srcin	a0
-#define	limit   a1
-#define len 	v0
-
-
-/* Internal variable */
-#define data1		t0
-#define	data2		t1
-#define	has_nul1	t2
-#define	has_nul2	t3
-#define src	        t4
-#define zeroones	t5
-#define	sevenf		t6
-#define data2a	    t7
-#define tmp6	    t7
-#define pos	        t8
-#define tmp1		a2
-#define	tmp2		a3
-#define	tmp3		a4
-#define tmp4        a5
-#define tmp5        a6
-#define limit_wd    a7
-
-
+#endif
 
-/* size_t strnlen (const char *s1,size_t maxlen); */
+#. before every load, a1(t5) must > 0;
+#. first load with t1 != 0, need to adjust t5;
+#. return the less one of both strlen(s) and a1;
 
 LEAF(STRNLEN)
+	.align 6
+	beqz		a1, L(out)
+	lu12i.w		a2, 0x01010
+	andi		t1, a0, 0x7
+	move		t4, a0
+
+	bstrins.d	a0, zero, 2, 0
+	ori		a2, a2, 0x101
+	li.w		t0, -1
+	ld.d		t2, a0, 0
+
+	slli.d		t3, t1, 3
+	bstrins.d	a2, a2, 63, 32
+	li.w		t5, 8
+	slli.d		a3, a2, 7
+
+	sub.w		t1, t5, t1
+	sll.d		t0, t0, t3
+	nor		a3, zero, a3
+	orn		t2, t2, t0
+
+
+	sub.d		t0, t2, a2
+	nor		t3, t2, a3
+	and		t0, t0, t3
+	bnez		t0, L(count_pos)
+
+	sub.d		t5, a1, t1
+	bgeu		t1, a1, L(out)
+L(loop_8bytes):
+	ld.d		t2, a0, 8
+	addi.d		a0, a0, 8
+
+	sub.d		t0, t2, a2
+	nor 		t1, t2, a3
+	sltui		t6, t5, 9
+	and 		t0, t0, t1
+
+	addi.d		t5, t5, -8
+	or		t7, t0, t6
+	beqz		t7, L(loop_8bytes)
+L(count_pos):
+	ctz.d		t1, t0
+
+
+	sub.d		a0, a0, t4
+	srli.d		t1, t1, 3
+	add.d		a0, t1, a0
+	sltu		t0, a0, a1
+
+	masknez		t1, a1, t0
+	maskeqz		a0, a0, t0
+	or		a0, a0, t1
+	jr		ra
+
+L(out):
+	move		a0, a1
+	jr		ra
 
-	.align		4
-    beqz        limit, L(_hit_limit)
-    lu12i.w     zeroones, 0x01010
-    lu12i.w     sevenf, 0x7f7f7
-    ori         zeroones, zeroones, 0x101
-    ori         sevenf, sevenf, 0xf7f
-    bstrins.d   zeroones, zeroones, 63, 32
-    bstrins.d   sevenf, sevenf, 63, 32
-    andi        tmp1, srcin, 15
-    sub.d       src, srcin, tmp1
-    bnez        tmp1, L(misaligned)
-    addi.d      limit_wd, limit, -1
-    srli.d      limit_wd, limit_wd, 4
-L(_loop):
-    ld.d        data1, src, 0
-    ld.d        data2, src, 8
-    addi.d      src, src, 16
-L(_realigned):
-    sub.d       tmp1, data1, zeroones
-    or          tmp2, data1, sevenf
-    sub.d       tmp3, data2, zeroones
-    or          tmp4, data2, sevenf
-    andn        has_nul1, tmp1, tmp2
-    andn        has_nul2, tmp3, tmp4
-    addi.d      limit_wd, limit_wd, -1
-    srli.d      tmp1, limit_wd, 63
-    or          tmp2, has_nul1, has_nul2
-    or          tmp3, tmp1, tmp2
-    beqz        tmp3, L(_loop)
-    beqz        tmp2, L(_hit_limit)
-    sub.d       len, src, srcin
-    beqz        has_nul1, L(_nul_in_data2)
-    move        has_nul2, has_nul1
-    addi.d      len, len, -8
-L(_nul_in_data2):
-    ctz.d       pos, has_nul2
-    srli.d      pos, pos, 3
-    addi.d      len, len, -8
-    add.d       len, len, pos
-    sltu        tmp1, len, limit
-    CONDITIONSEL(len,len,limit,tmp1)
-    jr ra
-
-
-L(misaligned):
-    addi.d      limit_wd, limit, -1
-    sub.d       tmp4, zero, tmp1
-    andi        tmp3, limit_wd, 15
-    srli.d      limit_wd, limit_wd, 4
-    li.d        tmp5, -1
-    ld.d        data1, src, 0
-    ld.d        data2, src, 8
-    addi.d      src, src, 16
-    slli.d      tmp4, tmp4, 3
-    add.d       tmp3, tmp3, tmp1
-    srl.d       tmp2, tmp5, tmp4
-    srli.d      tmp3, tmp3, 4
-    add.d       limit_wd, limit_wd, tmp3
-    or          data1, data1, tmp2
-    or          data2a, data2, tmp2
-    li.w          tmp3, 9
-    sltu        tmp1, tmp1, tmp3
-    CONDITIONSEL(data1,data1,tmp5,tmp1)
-    CONDITIONSEL(data2,data2,data2a,tmp1)
-    b           L(_realigned)
-
-
-L(_hit_limit):
-    move len, limit
-    jr  ra
 END(STRNLEN)
-#ifndef ANDROID_CHANGES
+
 #ifdef _LIBC
-weak_alias (__strnlen, strnlen)
-libc_hidden_def (strnlen)
-libc_hidden_def (__strnlen)
-#endif
+weak_alias (STRNLEN, strnlen)
+libc_hidden_builtin_def (STRNLEN)
 #endif
-- 
2.20.1

