From 393437ab4b44f5b42f708c5c789d48296a6ab050 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Thu, 9 Feb 2023 16:49:41 +0800
Subject: [PATCH 15/44] glibc-2.28: Multiple implementation of
 _dl_runtime_resolve{,_lasx,_lsx} to suit different larch platforms.

Change-Id: Iea3855d50fa51e088d408ce1a98ede00a7d504d6
---
 sysdeps/loongarch/dl-machine.h    |  11 ++-
 sysdeps/loongarch/dl-trampoline.S | 103 +++-----------------
 sysdeps/loongarch/dl-trampoline.h | 153 ++++++++++++++++++++++++++++++
 3 files changed, 176 insertions(+), 91 deletions(-)
 create mode 100644 sysdeps/loongarch/dl-trampoline.h

diff --git a/sysdeps/loongarch/dl-machine.h b/sysdeps/loongarch/dl-machine.h
index 1b89ed2ab3..9fc28f79a3 100644
--- a/sysdeps/loongarch/dl-machine.h
+++ b/sysdeps/loongarch/dl-machine.h
@@ -368,13 +368,22 @@ elf_machine_runtime_setup (struct link_map *l, int lazy, int profile)
   if (l->l_info[DT_JMPREL])
     {
       extern void _dl_runtime_resolve (void) __attribute__ ((visibility ("hidden")));
+      extern void _dl_runtime_resolve_lasx (void) __attribute__ ((visibility ("hidden")));
+      extern void _dl_runtime_resolve_lsx (void) __attribute__ ((visibility ("hidden")));
       ElfW(Addr) *gotplt = (ElfW(Addr) *) D_PTR (l, l_info[DT_PLTGOT]);
       /* If a library is prelinked but we have to relocate anyway,
 	 we have to be able to undo the prelinking of .got.plt.
 	 The prelinker saved the address of .plt for us here.  */
       if (gotplt[1])
 	l->l_mach.plt = gotplt[1] + l->l_addr;
-      gotplt[0] = (ElfW(Addr)) &_dl_runtime_resolve;
+
+      if (SUPPORT_LASX)
+	gotplt[0] = (ElfW(Addr)) &_dl_runtime_resolve_lasx;
+      else if (SUPPORT_LSX)
+	gotplt[0] = (ElfW(Addr)) &_dl_runtime_resolve_lsx;
+      else
+	gotplt[0] = (ElfW(Addr)) &_dl_runtime_resolve;
+
       gotplt[1] = (ElfW(Addr)) l;
     }
 #endif
diff --git a/sysdeps/loongarch/dl-trampoline.S b/sysdeps/loongarch/dl-trampoline.S
index 1f4689e067..5f627a6313 100644
--- a/sysdeps/loongarch/dl-trampoline.S
+++ b/sysdeps/loongarch/dl-trampoline.S
@@ -16,93 +16,16 @@
    License along with the GNU C Library.  If not, see
    <http://www.gnu.org/licenses/>.  */
 
-#include <sysdep.h>
-#include <sys/asm.h>
-
-/* Assembler veneer called from the PLT header code for lazy loading.
-   The PLT header passes its own args in t0-t2.  */
-
-#ifdef __loongarch_soft_float
-# define FRAME_SIZE (-((-10 * SZREG) & ALMASK))
-#else
-# define FRAME_SIZE (-((-10 * SZREG - 8 * SZFREG) & ALMASK))
-#endif
-
-ENTRY (_dl_runtime_resolve)
-  # Save arguments to stack.
-
-#ifdef __loongarch64
-	addi.d	sp, sp, -FRAME_SIZE
-#elif defined __loongarch32
-	addi.w	sp, sp, -FRAME_SIZE
-#endif
-
-	REG_S	ra, sp, 9*SZREG
-	REG_S	a0, sp, 1*SZREG
-	REG_S	a1, sp, 2*SZREG
-	REG_S	a2, sp, 3*SZREG
-	REG_S	a3, sp, 4*SZREG
-	REG_S	a4, sp, 5*SZREG
-	REG_S	a5, sp, 6*SZREG
-	REG_S	a6, sp, 7*SZREG
-	REG_S	a7, sp, 8*SZREG
-
-#ifndef __loongarch_soft_float
-	FREG_S	fa0, sp, 10*SZREG + 0*SZFREG
-	FREG_S	fa1, sp, 10*SZREG + 1*SZFREG
-	FREG_S	fa2, sp, 10*SZREG + 2*SZFREG
-	FREG_S	fa3, sp, 10*SZREG + 3*SZFREG
-	FREG_S	fa4, sp, 10*SZREG + 4*SZFREG
-	FREG_S	fa5, sp, 10*SZREG + 5*SZFREG
-	FREG_S	fa6, sp, 10*SZREG + 6*SZFREG
-	FREG_S	fa7, sp, 10*SZREG + 7*SZFREG
-#endif
-
-  # Update .got.plt and obtain runtime address of callee.
-#ifdef __loongarch64
-	slli.d	a1, t1, 1
-	or	a0, t0, zero
-	add.d	a1, a1, t1
-	la	a2, _dl_fixup
-	jirl	ra, a2, 0
-	or	t1, v0, zero
-#elif defined __loongarch32
-	slli.w	a1, t1, 1
-	or	a0, t0, zero
-	add.w	a1, a1, t1
-	la	a2, _dl_fixup
-	jirl	ra, a2, 0
-	or	t1, v0, zero
-#endif
-
-  # Restore arguments from stack.
-	REG_L	ra, sp, 9*SZREG
-	REG_L	a0, sp, 1*SZREG
-	REG_L	a1, sp, 2*SZREG
-	REG_L	a2, sp, 3*SZREG
-	REG_L	a3, sp, 4*SZREG
-	REG_L	a4, sp, 5*SZREG
-	REG_L	a5, sp, 6*SZREG
-	REG_L	a6, sp, 7*SZREG
-	REG_L	a7, sp, 8*SZREG
-
-#ifndef __loongarch_soft_float
-	FREG_L	fa0, sp, 10*SZREG + 0*SZFREG
-	FREG_L	fa1, sp, 10*SZREG + 1*SZFREG
-	FREG_L	fa2, sp, 10*SZREG + 2*SZFREG
-	FREG_L	fa3, sp, 10*SZREG + 3*SZFREG
-	FREG_L	fa4, sp, 10*SZREG + 4*SZFREG
-	FREG_L	fa5, sp, 10*SZREG + 5*SZFREG
-	FREG_L	fa6, sp, 10*SZREG + 6*SZFREG
-	FREG_L	fa7, sp, 10*SZREG + 7*SZFREG
-#endif
-
-#ifdef __loongarch64
-	addi.d	sp, sp, FRAME_SIZE
-#elif defined __loongarch32
-	addi.w	sp, sp, FRAME_SIZE
-#endif
-
-  # Invoke the callee.
-	jirl	zero, t1, 0
-END (_dl_runtime_resolve)
+#define USE_LASX
+#define _dl_runtime_resolve _dl_runtime_resolve_lasx
+#include "dl-trampoline.h"
+#undef USE_LASX
+#undef _dl_runtime_resolve
+
+#define USE_LSX
+#define _dl_runtime_resolve _dl_runtime_resolve_lsx
+#include "dl-trampoline.h"
+#undef USE_LSX
+#undef _dl_runtime_resolve
+
+#include "dl-trampoline.h"
diff --git a/sysdeps/loongarch/dl-trampoline.h b/sysdeps/loongarch/dl-trampoline.h
new file mode 100644
index 0000000000..9563911160
--- /dev/null
+++ b/sysdeps/loongarch/dl-trampoline.h
@@ -0,0 +1,153 @@
+/* LoongArch PLT trampoline
+   Copyright (C) 2017-2018 Free Software Foundation, Inc.
+
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library.  If not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#include <sysdep.h>
+#include <sys/asm.h>
+
+/* Assembler veneer called from the PLT header code for lazy loading.
+   The PLT header passes its own args in t0-t2.  */
+
+#ifdef __loongarch_soft_float
+# define FRAME_SIZE (-((-10 * SZREG) & ALMASK))
+#else
+# define FRAME_SIZE (-((-10 * SZREG - 8 * 256) & ALMASK))
+#endif
+
+ENTRY (_dl_runtime_resolve)
+  # Save arguments to stack.
+
+#ifdef __loongarch64
+	li.d    t3, -FRAME_SIZE
+	add.d	sp, sp, t3
+#elif defined __loongarch32
+	li.w    t3, -FRAME_SIZE
+	add.w	sp, sp, t3
+#endif
+
+
+	REG_S	ra, sp, 9*SZREG
+	REG_S	a0, sp, 1*SZREG
+	REG_S	a1, sp, 2*SZREG
+	REG_S	a2, sp, 3*SZREG
+	REG_S	a3, sp, 4*SZREG
+	REG_S	a4, sp, 5*SZREG
+	REG_S	a5, sp, 6*SZREG
+	REG_S	a6, sp, 7*SZREG
+	REG_S	a7, sp, 8*SZREG
+
+#ifndef __loongarch_soft_float
+	FREG_S	fa0, sp, 10*SZREG + 0*SZFREG
+	FREG_S	fa1, sp, 10*SZREG + 1*SZFREG
+	FREG_S	fa2, sp, 10*SZREG + 2*SZFREG
+	FREG_S	fa3, sp, 10*SZREG + 3*SZFREG
+	FREG_S	fa4, sp, 10*SZREG + 4*SZFREG
+	FREG_S	fa5, sp, 10*SZREG + 5*SZFREG
+	FREG_S	fa6, sp, 10*SZREG + 6*SZFREG
+	FREG_S	fa7, sp, 10*SZREG + 7*SZFREG
+#ifdef USE_LASX
+	xvst	$xr0, sp, 10*SZREG + 0*256
+	xvst	$xr1, sp, 10*SZREG + 1*256
+	xvst	$xr2, sp, 10*SZREG + 2*256
+	xvst	$xr3, sp, 10*SZREG + 3*256
+	xvst	$xr4, sp, 10*SZREG + 4*256
+	xvst	$xr5, sp, 10*SZREG + 5*256
+	xvst	$xr6, sp, 10*SZREG + 6*256
+	xvst	$xr7, sp, 10*SZREG + 7*256
+#elif defined USE_LSX
+	vst	$vr0, sp, 10*SZREG + 0*128
+	vst	$vr1, sp, 10*SZREG + 1*128
+	vst	$vr2, sp, 10*SZREG + 2*128
+	vst	$vr3, sp, 10*SZREG + 3*128
+	vst	$vr4, sp, 10*SZREG + 4*128
+	vst	$vr5, sp, 10*SZREG + 5*128
+	vst	$vr6, sp, 10*SZREG + 6*128
+	vst	$vr7, sp, 10*SZREG + 7*128
+#endif
+#endif
+
+  # Update .got.plt and obtain runtime address of callee.
+#ifdef __loongarch64
+	slli.d	a1, t1, 1
+	or	a0, t0, zero
+	add.d	a1, a1, t1
+	la	a2, _dl_fixup
+	jirl	ra, a2, 0
+	or	t1, v0, zero
+#elif defined __loongarch32
+	slli.w	a1, t1, 1
+	or	a0, t0, zero
+	add.w	a1, a1, t1
+	la	a2, _dl_fixup
+	jirl	ra, a2, 0
+	or	t1, v0, zero
+#endif
+
+  # Restore arguments from stack.
+	REG_L	ra, sp, 9*SZREG
+	REG_L	a0, sp, 1*SZREG
+	REG_L	a1, sp, 2*SZREG
+	REG_L	a2, sp, 3*SZREG
+	REG_L	a3, sp, 4*SZREG
+	REG_L	a4, sp, 5*SZREG
+	REG_L	a5, sp, 6*SZREG
+	REG_L	a6, sp, 7*SZREG
+	REG_L	a7, sp, 8*SZREG
+
+#ifndef __loongarch_soft_float
+	FREG_L	fa0, sp, 10*SZREG + 0*SZFREG
+	FREG_L	fa1, sp, 10*SZREG + 1*SZFREG
+	FREG_L	fa2, sp, 10*SZREG + 2*SZFREG
+	FREG_L	fa3, sp, 10*SZREG + 3*SZFREG
+	FREG_L	fa4, sp, 10*SZREG + 4*SZFREG
+	FREG_L	fa5, sp, 10*SZREG + 5*SZFREG
+	FREG_L	fa6, sp, 10*SZREG + 6*SZFREG
+	FREG_L	fa7, sp, 10*SZREG + 7*SZFREG
+#ifdef USE_LASX
+	xvld	$xr0, sp, 10*SZREG + 0*256
+	xvld	$xr1, sp, 10*SZREG + 1*256
+	xvld	$xr2, sp, 10*SZREG + 2*256
+	xvld	$xr3, sp, 10*SZREG + 3*256
+	xvld	$xr4, sp, 10*SZREG + 4*256
+	xvld	$xr5, sp, 10*SZREG + 5*256
+	xvld	$xr6, sp, 10*SZREG + 6*256
+	xvld	$xr7, sp, 10*SZREG + 7*256
+#elif defined USE_LSX
+	vld	$vr0, sp, 10*SZREG + 0*128
+	vld	$vr1, sp, 10*SZREG + 1*128
+	vld	$vr2, sp, 10*SZREG + 2*128
+	vld	$vr3, sp, 10*SZREG + 3*128
+	vld	$vr4, sp, 10*SZREG + 4*128
+	vld	$vr5, sp, 10*SZREG + 5*128
+	vld	$vr6, sp, 10*SZREG + 6*128
+	vld	$vr7, sp, 10*SZREG + 7*128
+#endif
+#endif
+
+#ifdef __loongarch64
+	li.d    t3, FRAME_SIZE
+	add.d	sp, sp, t3
+#elif defined __loongarch32
+	li.w    t3, FRAME_SIZE
+	addi.w	sp, sp, FRAME_SIZE
+#endif
+
+
+  # Invoke the callee.
+	jirl	zero, t1, 0
+END (_dl_runtime_resolve)
-- 
2.20.1

