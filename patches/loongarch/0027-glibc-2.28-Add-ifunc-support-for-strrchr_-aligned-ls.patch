From bf4f0997714a9212b6c3ee92ba6304fa6731cbcd Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Sat, 18 Feb 2023 10:18:18 +0800
Subject: [PATCH 27/44] glibc-2.28: Add ifunc support for strrchr_{aligned,lsx}

Change-Id: I28c54ba571cc01cbffef5f29796efe6fe173130a
---
 sysdeps/loongarch/lp64/multiarch/Makefile     |   3 +-
 .../lp64/multiarch/ifunc-impl-list.c          |   5 +
 .../loongarch/lp64/multiarch/ifunc-strrchr.h  |  34 ++++++
 .../lp64/multiarch/strrchr-aligned.S          |   8 ++
 .../loongarch/lp64/multiarch/strrchr-lsx.S    |  93 +++++++++++++++
 sysdeps/loongarch/lp64/multiarch/strrchr.c    |  39 +++++++
 sysdeps/loongarch/lp64/strrchr.S              | 108 ++++++++++++++++++
 7 files changed, 289 insertions(+), 1 deletion(-)
 create mode 100644 sysdeps/loongarch/lp64/multiarch/ifunc-strrchr.h
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strrchr-aligned.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strrchr-lsx.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/strrchr.c
 create mode 100644 sysdeps/loongarch/lp64/strrchr.S

diff --git a/sysdeps/loongarch/lp64/multiarch/Makefile b/sysdeps/loongarch/lp64/multiarch/Makefile
index a1ed9bfd42..f7bf31e6e8 100644
--- a/sysdeps/loongarch/lp64/multiarch/Makefile
+++ b/sysdeps/loongarch/lp64/multiarch/Makefile
@@ -6,5 +6,6 @@ sysdep_routines += memcpy-aligned memcpy-unaligned memcpy-lasx \
 		   memrchr-generic memrchr-lsx \
 		   memcmp-aligned memcmp-lsx \
 		   rawmemchr-aligned rawmemchr-lsx \
-		   strchr-aligned strchr-unaligned strchr-lsx
+		   strchr-aligned strchr-unaligned strchr-lsx \
+		   strrchr-aligned strrchr-lsx
 endif
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
index 6ef20e8949..6be2038d95 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
@@ -81,6 +81,11 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 	      IFUNC_IMPL_ADD (array, i, strchr, 1, __strchr_unaligned)
 	      )
 
+  IFUNC_IMPL (i, name, strrchr,
+	      IFUNC_IMPL_ADD (array, i, strrchr, 1, __strrchr_lsx)
+	      IFUNC_IMPL_ADD (array, i, strrchr, 1, __strrchr_aligned)
+	      )
+
   return i;
 }
 
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-strrchr.h b/sysdeps/loongarch/lp64/multiarch/ifunc-strrchr.h
new file mode 100644
index 0000000000..74cdb22aeb
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-strrchr.h
@@ -0,0 +1,34 @@
+/* Common definition for strrchr implementation.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <init-arch.h>
+
+extern __typeof (REDIRECT_NAME) OPTIMIZE (lsx) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (aligned) attribute_hidden;
+
+static inline void *
+IFUNC_SELECTOR (void)
+{
+  INIT_ARCH();
+
+  if (SUPPORT_LSX)
+    return OPTIMIZE (lsx);
+  else
+    return OPTIMIZE (aligned);
+}
diff --git a/sysdeps/loongarch/lp64/multiarch/strrchr-aligned.S b/sysdeps/loongarch/lp64/multiarch/strrchr-aligned.S
new file mode 100644
index 0000000000..5ef09a81fa
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strrchr-aligned.S
@@ -0,0 +1,8 @@
+
+#if IS_IN (libc)
+
+#define STRRCHR_NAME __strrchr_aligned
+
+#endif
+
+#include "../strrchr.S"
diff --git a/sysdeps/loongarch/lp64/multiarch/strrchr-lsx.S b/sysdeps/loongarch/lp64/multiarch/strrchr-lsx.S
new file mode 100644
index 0000000000..68012d6300
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strrchr-lsx.S
@@ -0,0 +1,93 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define STRRCHR_NAME __strrchr_lsx
+
+LEAF(STRRCHR_NAME)
+    .align          6
+    andi            t0, a0, 0x1f
+    bstrins.d       a0, zero, 4, 0
+    vld             $vr0, a0, 0
+    vld             $vr1, a0, 16
+
+    vreplgr2vr.b    $vr4, a1
+    li.d            t2, -1
+    move            a2, zero
+    addi.d          a0, a0, 31
+
+    vxor.v          $vr2, $vr0, $vr4
+    vxor.v          $vr3, $vr1, $vr4
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+
+    vmsknz.b        $vr2, $vr2
+    vmsknz.b        $vr3, $vr3
+    vilvl.h         $vr0, $vr1, $vr0
+    vilvl.h         $vr1, $vr3, $vr2
+
+
+    sll.d           t3, t2, t0
+    movfr2gr.s      t0, $f0
+    movfr2gr.s      t1, $f1
+    orn             t0, t0, t3
+
+    orn             t1, t1, t3
+    bne             t0, t2, L(end)
+L(loop):
+    vld             $vr0, a0, 1
+    vld             $vr1, a0, 17
+
+    clo.w           t0, t1
+    orn             t1, zero, t1
+    sub.d           t0, a0, t0
+    addi.d          a0, a0, 32
+
+    maskeqz         t0, t0, t1
+    masknez         t1, a2, t1
+    or              a2, t0, t1
+    vxor.v          $vr2, $vr0, $vr4
+
+    vxor.v          $vr3, $vr1, $vr4
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+    vmsknz.b        $vr2, $vr2
+
+    vmsknz.b        $vr3, $vr3
+    vilvl.h         $vr0, $vr1, $vr0
+    vilvl.h         $vr1, $vr3, $vr2
+    movfr2gr.s      t0, $f0
+
+    movfr2gr.s      t1, $f1
+    beq             t0, t2, L(loop)
+L(end):
+    slli.d          t3, t2, 1   # shift one more for the last '\0'
+    cto.w           t0, t0
+
+    sll.d           t3, t3, t0
+    or              t1, t1, t3
+    clo.w           t0, t1
+    orn             t1, zero, t1
+
+    sub.d           a0, a0, t0
+    maskeqz         t0, a0, t1
+    masknez         t1, a2, t1
+    or              a0, t0, t1
+
+    jr              ra
+END(STRRCHR_NAME)
+
+#ifdef _LIBC
+#undef rindex
+weak_alias(strrchr,rindex)
+libc_hidden_builtin_def(STRRCHR_NAME)
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/strrchr.c b/sysdeps/loongarch/lp64/multiarch/strrchr.c
new file mode 100644
index 0000000000..8809ca2c0c
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/strrchr.c
@@ -0,0 +1,39 @@
+/* Multiple versions of strrchr.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+/* Define multiple versions only for the definition in libc.  */
+#if IS_IN (libc)
+# define strrchr __redirect_strrchr
+# include <string.h>
+# undef strrchr
+
+# define SYMBOL_NAME strrchr
+# include "ifunc-strrchr.h"
+
+libc_ifunc_redirected (__redirect_strrchr, __new_strrchr,
+		       IFUNC_SELECTOR ());
+
+# ifdef SHARED
+__hidden_ver1 (__new_strrchr, __GI_strrchr, __redirect_strrchr)
+  __attribute__ ((visibility ("hidden")));
+# endif
+
+# include <shlib-compat.h>
+versioned_symbol (libc, __new_strrchr, strrchr, GLIBC_2_27);
+#endif
diff --git a/sysdeps/loongarch/lp64/strrchr.S b/sysdeps/loongarch/lp64/strrchr.S
new file mode 100644
index 0000000000..453e75062d
--- /dev/null
+++ b/sysdeps/loongarch/lp64/strrchr.S
@@ -0,0 +1,108 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#ifndef STRRCHR_NAME
+#define STRRCHR_NAME strrchr
+#endif
+
+LEAF(STRRCHR_NAME)
+	.align 6
+	slli.d		t1, a0, 3
+	bstrins.d	a0, zero, 2, 0
+	lu12i.w		a2, 0x01010
+	ld.d		t2, a0, 0       // t2 = "5ZZ21abc"
+
+	ori		a2, a2, 0x101
+	andi		a1, a1, 0xff	// a1 = "0000000Z"
+	li.d		a5, -1
+	bstrins.d	a2, a2, 63, 32	// a2 = 0x0101010101010101
+
+	sll.d		t1, a5, t1	// t1 = 0xffffffffff000000
+	mul.d		a1, a1, a2	// a1 = "ZZZZZZZZ"
+	orn		t2, t2, t1	// t2 = "5ZZ21YYY"
+	slli.d		a3, a2, 7	// a3 = 0x8080808080808080
+
+	sub.d		a4, t2, a2
+	andn		t0, a3, t2
+	move		t3, zero
+	and		t0, a4, t0
+
+
+	xor		a4, t2, a1
+	move		t5, zero
+	orn		a4, a4, t1
+	bnez		t0, L(found_end)
+
+	sub.d		t1, a4, a2
+	andn		t0, a3, a4
+	and		t1, t1, t0
+
+L(loop_8bytes):
+	masknez		t4, t3, t1
+
+	maskeqz		t3, t2, t1
+	ld.d		t2, a0, 8
+	masknez		t0, t5, t1
+	maskeqz		t5, a0, t1
+
+	or		t3, t3, t4
+	or		t5, t0, t5
+	sub.d		t0, t2, a2
+	andn		t1, a3, t2
+
+
+	xor		a4, t2, a1
+	and		t0, t0, t1	//t0 hold diff pattern for '\0'
+	sub.d		t1, a4, a2
+	andn		t4, a3, a4
+
+	and		t1, t1, t4	//t1 hold diff pattern for 'a1'
+	addi.d		a0, a0, 8
+	beqz		t0, L(loop_8bytes)	//ok, neither \0 nor found
+L(found_end):
+	ctz.d		t1, t0
+
+	xor		t3, t3, a1
+	orn		t1, zero, t1
+	revb.d		t3, t3
+	srl.d		t1, a5, t1  // mask for '\0'
+
+	sub.d		t4, t3, a2
+	orn		a4, a4, t1
+	andn		t3, a3, t3
+	revb.d		t2, a4
+
+	sub.d		t0, t2, a2
+	andn		t1, a3, t2
+	and		t3, t3, t4
+	and		t1, t0, t1
+
+	li.d		t7, 7
+	masknez		t4, t3, t1
+	maskeqz		t3, t1, t1
+	masknez		t5, t5, t1
+
+	or		t3, t3, t4
+	maskeqz		t6, a0, t1
+	ctz.d		t0, t3
+	or		t5, t6, t5
+
+	srli.d		t0, t0, 3
+	sub.d		t0, t7, t0
+	add.d		a0, t5, t0
+	maskeqz		a0, a0, t3
+
+	jr		ra
+END(STRRCHR_NAME)
+
+#ifdef _LIBC
+#undef rindex
+weak_alias(STRRCHR_NAME, rindex)
+libc_hidden_builtin_def(STRRCHR_NAME)
+#endif
-- 
2.20.1

