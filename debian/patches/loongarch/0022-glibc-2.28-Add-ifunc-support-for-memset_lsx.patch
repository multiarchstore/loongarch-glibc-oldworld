From 3cef2ec09432330b4244aae0c7e2377d3cef5301 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Thu, 16 Feb 2023 09:23:40 +0800
Subject: [PATCH 22/44] glibc-2.28: Add ifunc support for memset_lsx

Change-Id: Ie7a7c231071e2edcb8d4ffe6d16775f8150c4c33
---
 sysdeps/loongarch/lp64/multiarch/Makefile     |   2 +-
 .../lp64/multiarch/ifunc-impl-list.c          |   1 +
 .../loongarch/lp64/multiarch/ifunc-memset.h   |   5 +-
 sysdeps/loongarch/lp64/multiarch/memset-lsx.S | 125 ++++++++++++++++++
 4 files changed, 131 insertions(+), 2 deletions(-)
 create mode 100644 sysdeps/loongarch/lp64/multiarch/memset-lsx.S

diff --git a/sysdeps/loongarch/lp64/multiarch/Makefile b/sysdeps/loongarch/lp64/multiarch/Makefile
index 8f39a08c0f..d0a12eab82 100644
--- a/sysdeps/loongarch/lp64/multiarch/Makefile
+++ b/sysdeps/loongarch/lp64/multiarch/Makefile
@@ -1,6 +1,6 @@
 ifeq ($(subdir),string)
 sysdep_routines += memcpy-aligned memcpy-unaligned memcpy-lasx \
-		   memset-aligned memset-unaligned memset-lasx \
+		   memset-aligned memset-unaligned memset-lasx memset-lsx \
 		   memmove-unaligned memmove-lsx \
 		   memchr-aligned memchr-lsx \
 		   memrchr-generic memrchr-lsx
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
index 7935526ae6..b910a4a305 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
@@ -50,6 +50,7 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 
   IFUNC_IMPL (i, name, memset,
 	      IFUNC_IMPL_ADD (array, i, memset, 1, __memset_lasx)
+	      IFUNC_IMPL_ADD (array, i, memset, 1, __memset_lsx)
 	      IFUNC_IMPL_ADD (array, i, memset, 1, __memset_aligned)
 	      IFUNC_IMPL_ADD (array, i, memset, 1, __memset_unaligned)
 	      )
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-memset.h b/sysdeps/loongarch/lp64/multiarch/ifunc-memset.h
index 234f636be9..09f0eb0e2e 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-memset.h
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-memset.h
@@ -20,8 +20,9 @@
 #include <init-arch.h>
 
 extern __typeof (REDIRECT_NAME) OPTIMIZE (lasx) attribute_hidden;
-extern __typeof (REDIRECT_NAME) OPTIMIZE (aligned) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (lsx) attribute_hidden;
 extern __typeof (REDIRECT_NAME) OPTIMIZE (unaligned) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (aligned) attribute_hidden;
 
 static inline void *
 IFUNC_SELECTOR (void)
@@ -30,6 +31,8 @@ IFUNC_SELECTOR (void)
 
   if (SUPPORT_LASX)
     return OPTIMIZE (lasx);
+  if (SUPPORT_LSX)
+    return OPTIMIZE (lsx);
   else if (SUPPORT_UAL)
     return OPTIMIZE (unaligned);
   else
diff --git a/sysdeps/loongarch/lp64/multiarch/memset-lsx.S b/sysdeps/loongarch/lp64/multiarch/memset-lsx.S
new file mode 100644
index 0000000000..f5cbac21ed
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/memset-lsx.S
@@ -0,0 +1,125 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define MEMSET_NAME __memset_lsx
+
+LEAF(MEMSET_NAME)
+    .align          6
+    li.d            t1, 16
+    move            a3, a0
+    vreplgr2vr.b    $vr0, a1
+    add.d           a4, a0, a2
+
+    bgeu            t1, a2, L(less_16bytes) # len <= 16
+    li.d            t3, 64
+    li.d            t2, 32
+    bgeu            a2, t3, L(long_bytes) # len > 64
+
+L(less_64bytes):
+    bgeu            t2, a2, L(less_32bytes) # len <= 32
+    vst             $vr0, a3, 0
+    vst             $vr0, a3, 16
+    vst             $vr0, a4, -32
+
+    vst             $vr0, a4, -16
+    jr              ra
+L(less_32bytes):
+    vst             $vr0, a3, 0
+    vst             $vr0, a4, -16
+
+
+    jr              ra
+L(less_16bytes):
+    srli.d          t0, a2, 3
+    beqz            t0, L(less_8bytes)
+    vstelm.d        $vr0, a3, 0, 0
+
+    vstelm.d        $vr0, a4, -8, 0
+    jr              ra
+L(less_8bytes):
+    srli.d          t0, a2, 2
+    beqz            t0, L(less_4bytes)
+
+    vstelm.w        $vr0, a3, 0, 0
+    vstelm.w        $vr0, a4, -4, 0
+    jr              ra
+L(less_4bytes):
+    srli.d          t0, a2, 1
+
+    beqz            t0, L(less_2bytes)
+    vstelm.h        $vr0, a3, 0, 0
+    vstelm.h        $vr0, a4, -2, 0
+    jr              ra
+
+
+L(less_2bytes):
+    beqz            a2, L(less_1bytes)
+    vstelm.b        $vr0, a3, 0, 0
+L(less_1bytes):
+    jr              ra
+L(long_bytes):
+    vst             $vr0, a3, 0
+
+    bstrins.d       a3, zero, 3, 0
+    addi.d          a3, a3, 16
+    sub.d           a2, a4, a3
+    andi            t0, a2, 0x7f
+
+    beq             t0, a2, L(long_end)
+    move            a2, t0
+    sub.d           t0, a4, t0
+
+L(loop_128):
+    vst             $vr0, a3, 0
+
+    vst             $vr0, a3, 16
+    vst             $vr0, a3, 32
+    vst             $vr0, a3, 48
+    vst             $vr0, a3, 64
+
+
+    vst             $vr0, a3, 80
+    vst             $vr0, a3, 96
+    vst             $vr0, a3, 112
+    addi.d          a3, a3, 128
+
+    bne             a3, t0, L(loop_128)
+L(long_end):
+    bltu            a2, t3, L(end_less_64)
+    addi.d          a2, a2, -64
+    vst             $vr0, a3, 0
+
+    vst             $vr0, a3, 16
+    vst             $vr0, a3, 32
+    vst             $vr0, a3, 48
+    addi.d          a3, a3, 64
+
+L(end_less_64):
+    bltu            a2, t2, L(end_less_32)
+    addi.d          a2, a2, -32
+    vst             $vr0, a3, 0
+    vst             $vr0, a3, 16
+
+    addi.d          a3, a3, 32
+L(end_less_32):
+    bltu            a2, t1, L(end_less_16)
+    vst             $vr0, a3, 0
+
+L(end_less_16):
+    vst             $vr0, a4, -16
+    jr              ra
+END(MEMSET_NAME)
+
+#ifdef _LIBC
+libc_hidden_builtin_def (MEMSET_NAME)
+#endif
+
+#endif
-- 
2.20.1

