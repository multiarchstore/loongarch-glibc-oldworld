From e53625ffabcd35ca442b83c320718a656e56354d Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Wed, 15 Feb 2023 19:52:05 +0800
Subject: [PATCH 20/44] glibc-2.28: Add ifunc support for memrchr_{generic,lsx}

Change-Id: Ib01b2b6c27635fad0fb46e1c1572be19428b1c8f
---
 sysdeps/loongarch/lp64/multiarch/Makefile     |  3 +-
 .../lp64/multiarch/ifunc-impl-list.c          |  5 ++
 .../loongarch/lp64/multiarch/ifunc-memrchr.h  | 34 ++++++++
 .../lp64/multiarch/memrchr-generic.c          |  9 +++
 .../loongarch/lp64/multiarch/memrchr-lsx.S    | 80 +++++++++++++++++++
 sysdeps/loongarch/lp64/multiarch/memrchr.c    | 39 +++++++++
 6 files changed, 169 insertions(+), 1 deletion(-)
 create mode 100644 sysdeps/loongarch/lp64/multiarch/ifunc-memrchr.h
 create mode 100644 sysdeps/loongarch/lp64/multiarch/memrchr-generic.c
 create mode 100644 sysdeps/loongarch/lp64/multiarch/memrchr-lsx.S
 create mode 100644 sysdeps/loongarch/lp64/multiarch/memrchr.c

diff --git a/sysdeps/loongarch/lp64/multiarch/Makefile b/sysdeps/loongarch/lp64/multiarch/Makefile
index 24c71f6a42..ed7eb937ad 100644
--- a/sysdeps/loongarch/lp64/multiarch/Makefile
+++ b/sysdeps/loongarch/lp64/multiarch/Makefile
@@ -2,5 +2,6 @@ ifeq ($(subdir),string)
 sysdep_routines += memcpy-aligned memcpy-unaligned memcpy-lasx \
 		   memset-aligned memset-unaligned memset-lasx \
 		   memmove-unaligned \
-		   memchr-aligned memchr-lsx
+		   memchr-aligned memchr-lsx \
+		   memrchr-generic memrchr-lsx
 endif
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
index 18d9952c48..b0e541a949 100644
--- a/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-impl-list.c
@@ -57,6 +57,11 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 	      IFUNC_IMPL_ADD (array, i, memchr, 1, __memchr_aligned)
 	      )
 
+  IFUNC_IMPL (i, name, memrchr,
+	      IFUNC_IMPL_ADD (array, i, memrchr, 1, __memrchr_generic)
+	      IFUNC_IMPL_ADD (array, i, memrchr, 1, __memrchr_lsx)
+	      )
+
   return i;
 }
 
diff --git a/sysdeps/loongarch/lp64/multiarch/ifunc-memrchr.h b/sysdeps/loongarch/lp64/multiarch/ifunc-memrchr.h
new file mode 100644
index 0000000000..51f1d8d4cc
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/ifunc-memrchr.h
@@ -0,0 +1,34 @@
+/* Common definition for memrchr implementation.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <init-arch.h>
+
+extern __typeof (REDIRECT_NAME) OPTIMIZE (generic) attribute_hidden;
+extern __typeof (REDIRECT_NAME) OPTIMIZE (lsx) attribute_hidden;
+
+static inline void *
+IFUNC_SELECTOR (void)
+{
+  INIT_ARCH();
+
+  if (SUPPORT_LSX)
+    return OPTIMIZE (lsx);
+  else
+    return OPTIMIZE (generic);
+}
diff --git a/sysdeps/loongarch/lp64/multiarch/memrchr-generic.c b/sysdeps/loongarch/lp64/multiarch/memrchr-generic.c
new file mode 100644
index 0000000000..ee7ab39c17
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/memrchr-generic.c
@@ -0,0 +1,9 @@
+
+#if IS_IN (libc)
+
+#define MEMRCHR __memrchr_generic
+
+#endif
+
+#include <string/memrchr.c>
+weak_alias (__memrchr_generic, __memrchr)
diff --git a/sysdeps/loongarch/lp64/multiarch/memrchr-lsx.S b/sysdeps/loongarch/lp64/multiarch/memrchr-lsx.S
new file mode 100644
index 0000000000..60692e048b
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/memrchr-lsx.S
@@ -0,0 +1,80 @@
+#ifdef _LIBC
+#include <sysdep.h>
+#include <sys/regdef.h>
+#include <sys/asm.h>
+#else
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#endif
+
+#if IS_IN (libc)
+
+#define MEMRCHR_NAME __memrchr_lsx
+
+LEAF(MEMRCHR_NAME)
+    .align          6
+    beqz            a2, L(out)
+    addi.d          a2, a2, -1
+    add.d           a0, a0, a2
+    andi            t0, a0, 0x1f
+
+    sub.d           a3, a0, t0
+    addi.d          t2, t0, 1   # len for unaligned address
+    vld             $vr0, a3, 0
+    vld             $vr1, a3, 16
+
+    sub.d           t3, zero, t2
+    vreplgr2vr.b    $vr2, a1
+    sltu            t1, a2, t2
+    vseq.b          $vr0, $vr0, $vr2
+
+    vseq.b          $vr1, $vr1, $vr2
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+    vilvl.h         $vr0, $vr1, $vr0
+
+
+    movfr2gr.s      t0, $f0
+    sll.w           t0, t0, t3
+    or              t1, t0, t1
+    bnez            t1, L(end)
+
+    addi.d          a0, a3, 31
+    sub.d           a2, a2, t2
+L(loop):
+    vld             $vr0, a0, -63
+    vld             $vr1, a0, -47
+
+    sltui           t1, a2, 32
+    addi.d          a0, a0, -32
+    addi.d          a2, a2, -32
+    vseq.b          $vr0, $vr0, $vr2
+
+    vseq.b          $vr1, $vr1, $vr2
+    vmsknz.b        $vr0, $vr0
+    vmsknz.b        $vr1, $vr1
+    vilvl.h         $vr0, $vr1, $vr0
+
+
+    movfr2gr.s      t0, $f0
+    or              t1, t0, t1
+    beqz            t1, L(loop)
+    addi.d          a2, a2, 32
+
+L(end):
+    clz.w           t0, t0
+    sltu            t1, a2, t0
+    sub.d           a0, a0, t0
+    masknez         a0, a0, t1
+
+    jr              ra
+L(out):
+    move            a0, zero
+    jr              ra
+END(MEMRCHR_NAME)
+
+#ifdef _LIBC
+libc_hidden_builtin_def (MEMRCHR_NAME)
+#endif
+
+#endif
diff --git a/sysdeps/loongarch/lp64/multiarch/memrchr.c b/sysdeps/loongarch/lp64/multiarch/memrchr.c
new file mode 100644
index 0000000000..675c31157e
--- /dev/null
+++ b/sysdeps/loongarch/lp64/multiarch/memrchr.c
@@ -0,0 +1,39 @@
+/* Multiple versions of memrchr.
+   All versions must be listed in ifunc-impl-list.c.
+   Copyright (C) 2017-2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+/* Define multiple versions only for the definition in libc.  */
+#if IS_IN (libc)
+# define memrchr __redirect_memrchr
+# include <string.h>
+# undef memrchr
+
+# define SYMBOL_NAME memrchr
+# include "ifunc-memrchr.h"
+
+libc_ifunc_redirected (__redirect_memrchr, __new_memrchr,
+		       IFUNC_SELECTOR ());
+
+# ifdef SHARED
+__hidden_ver1 (__new_memrchr, __GI_memrchr, __redirect_memrchr)
+  __attribute__ ((visibility ("hidden")));
+# endif
+
+# include <shlib-compat.h>
+versioned_symbol (libc, __new_memrchr, memrchr, GLIBC_2_27);
+#endif
-- 
2.20.1

