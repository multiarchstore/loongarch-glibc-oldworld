From 1fb0943316fef492fa6a370e5a1de46d0157d684 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Tue, 28 Feb 2023 14:25:10 +0800
Subject: [PATCH 38/44] glibc-2.28: Add TUNABLES multi options support of
 glibc.cpu.hwcaps

Change-Id: I90cd2efdd08db42a2cf3affe2b4238114aa97681
---
 sysdeps/loongarch/cpu-tunables.c | 64 +++++++++++++++++++++++---------
 1 file changed, 47 insertions(+), 17 deletions(-)

diff --git a/sysdeps/loongarch/cpu-tunables.c b/sysdeps/loongarch/cpu-tunables.c
index e4313f66e9..840c1b8c9c 100644
--- a/sysdeps/loongarch/cpu-tunables.c
+++ b/sysdeps/loongarch/cpu-tunables.c
@@ -31,18 +31,14 @@
   (HWCAP_LOONGARCH_UAL | HWCAP_LOONGARCH_LSX | HWCAP_LOONGARCH_LASX)
 
 # define CHECK_GLIBC_IFUNC_CPU_OFF(f, name, len)			\
-  if (!memcmp (f, #name, len))						\
+  _Static_assert (sizeof (#name) - 1 == len, #name " != " #len);	\
+  if (!memcmp (f, #name, len) &&					\
+      (GLRO (dl_hwcap) & HWCAP_LOONGARCH_##name))			\
     {									\
-      if ((GLRO (dl_hwcap) & HWCAP_LOONGARCH_##name))			\
-      {									\
-	GLRO (dl_hwcap) &= (HWCAP_LOONGARCH_##name |			\
-			   (~HWCAP_LOONGARCH_IFUNC));			\
-	return;								\
-      }									\
-      else								\
-	_dl_fatal_printf ("%s is not supported on this machine!!\n",	\
-			#name);						\
-    }
+      hwcap |= (HWCAP_LOONGARCH_##name | (~HWCAP_LOONGARCH_IFUNC));	\
+      break;								\
+    }									\
+
 
 attribute_hidden
 void
@@ -50,15 +46,49 @@ TUNABLE_CALLBACK (set_hwcaps) (tunable_val_t *valp)
 {
   const char *p = valp->strval;
   size_t len;
+  unsigned long hwcap = 0;
+  const char *c;
+
+  do {
+      for (c = p; *c != ','; c++)
+	if (*c == '\0')
+	  break;
 
-  len = strlen(p);
+      len = c - p;
 
-  CHECK_GLIBC_IFUNC_CPU_OFF (p, LSX, len);
-  CHECK_GLIBC_IFUNC_CPU_OFF (p, UAL, len);
-  CHECK_GLIBC_IFUNC_CPU_OFF (p, LASX, len);
+      switch(len)
+      {
+	default:
+	  _dl_fatal_printf (
+	    "The valid values of glibc.cpu.hwcaps is UAL, LASX, LSX!!\n"
+			    );
+	  break;
+	case 3:
+	  {
+	    CHECK_GLIBC_IFUNC_CPU_OFF (p, LSX, 3);
+	    CHECK_GLIBC_IFUNC_CPU_OFF (p, UAL, 3);
+	    _dl_fatal_printf (
+		"Some features are invalid or not supported on this machine!!\n"
+		"The valid values of glibc.cpu.hwcaps is UAL, LASX, LSX!!\n"
+                       );
+	  }
+	  break;
+	case 4:
+	  {
+	    CHECK_GLIBC_IFUNC_CPU_OFF (p, LASX, 4);
+	    _dl_fatal_printf (
+		"Some features are invalid or not supported on this machine!!\n"
+		"The valid values of glibc.cpu.hwcaps is UAL, LASX, LSX!!\n"
+                       );
+	  }
+	  break;
+      }
+
+      p += len + 1;
+    }
+  while (*c != '\0');
 
-  _dl_fatal_printf ("The valid values of glibc.cpu.hwcaps is UAL, LASX, LSX!!\n"
-	);
+  GLRO (dl_hwcap) &= hwcap;
 }
 
 #endif
-- 
2.20.1

